{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Academics\\\\Web Application\\\\client\\\\webapplication\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(null);\n\n  // login request.\n  const loginUser = async userData => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ...userData\n        })\n      });\n      const result = await res.json();\n      if (!result.error) {\n        console.log(result);\n        localStorage.setItem(\"token\", result.token);\n      } else {}\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // register request.\n  const registerUser = async userData => {\n    try {\n      const res = await fetch('http://localhost:8000/api/register', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ...userData\n        })\n      });\n      const result = await res.json();\n      if (!result.error) {\n        console.log(result);\n      } else {\n        console.log(result);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loginUser,\n      registerUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n};\n_s(AuthContextProvider, \"v7rnY3wB8K8bJ5T16BSeNVjHHLs=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useState","toast","ToastContainer","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","children","_s","user","setUser","error","setError","loginUser","userData","res","fetch","method","headers","body","JSON","stringify","result","json","console","log","localStorage","setItem","token","err","registerUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/Academics/Web Application/client/webapplication/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState} from \"react\";\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthContextProvider = ({children}) => {\r\n    const [user, setUser] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n// login request.\r\nconst loginUser = async (userData) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/api/login`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ ...userData }),\r\n      });\r\n      const result = await res.json();\r\n      if (!result.error) {\r\n        console.log(result);\r\n        localStorage.setItem(\"token\", result.token);\r\n      } else {\r\n        \r\n      }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    };\r\n\r\n// register request.\r\nconst registerUser = async (userData) => {\r\n  \r\n  try {\r\n    const res = await fetch( 'http://localhost:8000/api/register', {\r\n      method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ ...userData }),\r\n      });\r\n    const result = await res.json();\r\n    if (!result.error) {\r\n      console.log(result);\r\n    } else {\r\n      console.log(result);\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n    return <AuthContext.Provider value={{loginUser, registerUser }}>\r\n        {children}\r\n    </AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAO,OAAO;AAC9C,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/C,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,mBAAmB,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMa,SAAS,GAAG,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE,GAAGP;QAAS,CAAC;MACtC,CAAC,CAAC;MACF,MAAMQ,MAAM,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;MAC/B,IAAI,CAACD,MAAM,CAACX,KAAK,EAAE;QACjBa,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QACnBI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,MAAM,CAACM,KAAK,CAAC;MAC7C,CAAC,MAAM,CAEP;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;IACpB;EACA,CAAC;;EAEL;EACA,MAAMC,YAAY,GAAG,MAAOhB,QAAQ,IAAK;IAEvC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,oCAAoC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACZC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE,GAAGP;QAAS,CAAC;MACtC,CAAC,CAAC;MACJ,MAAMQ,MAAM,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;MAC/B,IAAI,CAACD,MAAM,CAACX,KAAK,EAAE;QACjBa,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;MACrB,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;MACrB;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;IAClB;EACF,CAAC;EAEG,oBAAOzB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAACnB,SAAS;MAAEiB;IAAa,CAAE;IAAAvB,QAAA,EAC1DA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAC3B,CAAC;AAAC5B,EAAA,CAnDWF,mBAAmB;AAAA+B,EAAA,GAAnB/B,mBAAmB;AAqDhC,eAAeD,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}